-- standard builtin library

import ../compiler/scanner.js as Scanner
import ../compiler/preprocessor.js as Preprocessor
import ../compiler/lexer.js as Lexer
import ../compiler/parser.js as Parser
import ../compiler/emitter.js as Emitter
import fs as fs

class StdbLib
  meth constructor
    @scanner = new Scanner()
    @preprocessor = new Preprocessor(false)
    @lexer = new Lexer()
    @parser = new Parser()
    @emitter = new Emitter()
  end

  meth load (filename)
    def data = fs.readFileSync(filename.replace(".ax", "") + ".ax", "utf8")
    log data
    
    def statements = @preprocessor.process(data.trim().split('\n'));

    for (let line of statements) {
      def lex = @lexer.lex(line);
      @parser.parse(lex,line);
    }
    imm emit = @parser.emitted
    def new_name = filename.replace(".ax", "") + ".js"
    new_name = new_name.split("/")
    new_name = new_name[new_name.length - 1]
    log new_name
    fs.writeFileSync(new_name, emit)
    log "after writefile"
    log fs.readFileSync(new_name, 'utf8')
    log "after readfile"
    imm retcode = require("./" + new_name)
    fs.unlinkSync("./" + new_name)

    return retcode;
  end
end

class Struct
  meth constructor (code)
    @code = code
  end

  meth run ()
    return eval(@code)
  end
end

def stdblib = new StdbLib()
