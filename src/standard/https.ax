-- built-in library providing a simple interface to making HTTPS requests

https = std.js("require('http')");

module HTTPS

  fn default ()
    return @Request
  end

  class Request 
  
    fn constructor (url, headers=undefined)
      @url = url
      @headers = headers
    end
  
  end
  
  class Response
  
    fn constructor (request, data, status)
      @request = request
      @data = data
      @status = status
    end
  
    fn successful? ()
      if @status == 200
        return true
      else
        return false
      end
    end
  
  end
  
  class HTTPS
    fn constructor ()
      @record = []
    end
  
    fn request (options)
      -*
      Perform a request issued to the url.
      Interface.
      Arguments {
        - options <Object> {
          - url <string>
          - method <string>
          - headers <Object>
          - auth <Object> : basic auth
        }
      }
      *-
      https.request(options, do |res|
        data = [];
        status = res.status_code
        
        res.on('data',
          do |chunk|
            data.push(chunk)
          end
        )
  
        res.on('end',
          do
            parsed_data = JSON.parse(Buffer.concat(data).to_s())
            request = Request.new(url, options["headers"])
            response = Response.new(request, parsed_data, status)
            return response
          end
        )
      end
    end
  
    fn get (options)
      options["method"] = "GET"
      response = @request(options)
      return response
    end
  
    fn put (options)
      options["method"] = "PUT"
      return @request(options)
    end
  
    fn delete (options)
      options["method"] = "DELETE"
      return @request(options)
    end
  
    
  end
end
